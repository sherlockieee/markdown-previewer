{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["marked","setOptions","breaks","renderer","Renderer","link","href","title","text","App","props","state","markdown","placeholder","editorMaximized","previewMaximized","handleChange","bind","handleEditorMaximize","handlePreviewMaximize","e","this","setState","target","value","classes","className","id","onClick","icon","type","onChange","dangerouslySetInnerHTML","__html","React","Component","Toolbar","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yRAMAA,IAAOC,WAAW,CAChBC,QAAQ,IAGV,IAAMC,EAAW,IAAIH,IAAOI,SAC5BD,EAASE,KAAO,SAAUC,EAAMC,EAAOC,GACrC,MAAM,4BAAN,OAAmCF,EAAnC,aAA4CE,EAA5C,S,IAGIC,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,SAAUC,EACVC,iBAAiB,EACjBC,kBAAkB,GAEpB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,qBAAuB,EAAKA,qBAAqBD,KAA1B,gBAC5B,EAAKE,sBAAwB,EAAKA,sBAAsBF,KAA3B,gBATZ,E,yDAWNG,GACXC,KAAKC,SAAS,CACZV,SAAUQ,EAAEG,OAAOC,U,6CAIrBH,KAAKC,SAAS,CACZR,iBAAkBO,KAAKV,MAAMG,oB,8CAI/BO,KAAKC,SAAS,CACZP,kBAAmBM,KAAKV,MAAMI,qB,+BAIhC,IAAMU,EAAUJ,KAAKV,MAAMG,gBACvB,CAAC,YAAa,OAAQ,kBACtBO,KAAKV,MAAMI,iBACX,CAAC,OAAQ,aAAc,kBACvB,CAAC,OAAQ,OAAQ,oBAErB,OACE,yBAAKW,UAAU,OACb,yBAAKA,UAAU,aACb,wBAAIA,UAAU,UAAd,wBACA,yBAAKA,UAAU,OACb,yBAAKA,UAAWD,EAAQ,GAAIE,GAAG,cAC7B,wBAAID,UAAU,UAAd,eACA,kBAAC,EAAD,CACEE,QAASP,KAAKH,qBACdW,KAAMJ,EAAQ,GACdK,KAAMT,KAAKV,MAAMG,kBAEnB,8BACEU,MAAOH,KAAKV,MAAMC,SAClBmB,SAAUV,KAAKL,aACfW,GAAG,UAEFd,IAIL,yBAAKa,UAAWD,EAAQ,GAAIE,GAAG,eAC7B,wBAAID,UAAU,UAAd,YACA,kBAAC,EAAD,CACEE,QAASP,KAAKF,sBACdU,KAAMJ,EAAQ,GACdK,KAAMT,KAAKV,MAAMI,mBAEnB,yBACEY,GAAG,UACHK,wBAAyB,CACvBC,OAAQjC,IAAOqB,KAAKV,MAAMC,SAAU,CAAET,SAAUA,e,GAjEhD+B,IAAMC,WA4ElBC,EAAU,SAAC1B,GACf,OACE,4BAAQgB,UAAU,0BAA0BE,QAASlB,EAAMkB,SACxD,IACAlB,EAAMoB,KAAO,mBAAqB,qBAAsB,IACzD,uBAAGJ,UAAWhB,EAAMmB,SAKpBhB,EAAW,8qCA+CFJ,ICxIK4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.d8fc63bf.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport marked from \"marked\";\n\n// ALLOWS LINE BREAKS WITH RETURN BUTTON\nmarked.setOptions({\n  breaks: true,\n});\n\nconst renderer = new marked.Renderer();\nrenderer.link = function (href, title, text) {\n  return `<a target=\"_blank\" href=\"${href}\">${text}</a>`;\n};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      markdown: placeholder,\n      editorMaximized: false,\n      previewMaximized: false,\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleEditorMaximize = this.handleEditorMaximize.bind(this);\n    this.handlePreviewMaximize = this.handlePreviewMaximize.bind(this);\n  }\n  handleChange(e) {\n    this.setState({\n      markdown: e.target.value,\n    });\n  }\n  handleEditorMaximize() {\n    this.setState({\n      editorMaximized: !this.state.editorMaximized,\n    });\n  }\n  handlePreviewMaximize() {\n    this.setState({\n      previewMaximized: !this.state.previewMaximized,\n    });\n  }\n  render() {\n    const classes = this.state.editorMaximized\n      ? [\"maximized\", \"hide\", \"fa fa-compress\"]\n      : this.state.previewMaximized\n      ? [\"hide\", \" maximized\", \"fa fa-compress\"]\n      : [\" col\", \" col\", \"fa fa-arrows-alt\"];\n\n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n          <h1 className=\"header\"> Markdown Previewer </h1>\n          <div className=\"row\">\n            <div className={classes[0]} id=\"editor-box\">\n              <h2 className=\"header\">Editor View</h2>\n              <Toolbar\n                onClick={this.handleEditorMaximize}\n                icon={classes[2]}\n                type={this.state.editorMaximized}\n              />\n              <textarea\n                value={this.state.markdown}\n                onChange={this.handleChange}\n                id=\"editor\"\n              >\n                {placeholder}\n              </textarea>\n            </div>\n\n            <div className={classes[1]} id=\"preview-box\">\n              <h2 className=\"header\">Preview </h2>\n              <Toolbar\n                onClick={this.handlePreviewMaximize}\n                icon={classes[2]}\n                type={this.state.previewMaximized}\n              />\n              <div\n                id=\"preview\"\n                dangerouslySetInnerHTML={{\n                  __html: marked(this.state.markdown, { renderer: renderer }),\n                }}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst Toolbar = (props) => {\n  return (\n    <button className=\"toolbar btn btn-default\" onClick={props.onClick}>\n      {\" \"}\n      {props.type ? \"Click to return \" : \"Click to maximize \"}{\" \"}\n      <i className={props.icon}></i>\n    </button>\n  );\n};\n\nconst placeholder = `# Welcome to my React Markdown Previewer \n\n## This is a sub-heading...\n### And here's some other cool stuff:\n  \nHeres some code, \\`<div></div>\\`, between 2 backticks.\n\n\\`\\`\\`\n// this is multi-line code:\n\nfunction anotherExample(firstLine, lastLine) {\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\n    return multiLineCode;\n  }\n}\n\\`\\`\\`\n  \nYou can also make text **bold**... whoa!\nOr _italic_.\nOr... wait for it... **_both!_**\nAnd feel free to go crazy ~~crossing stuff out~~.\n\nThere's also [links](https://www.freecodecamp.com), and\n> Block Quotes!\n\nAnd if you want to get really crazy, even tables:\n\nWild Header | Crazy Header | Another Header?\n------------ | ------------- | ------------- \nYour content can | be here, and it | can be here....\nAnd here. | Okay. | I think we get it.\n\n- And of course there are lists.\n  - Some are bulleted.\n     - With different indentation levels.\n        - That look like this.\n\n\n1. And there are numbererd lists too.\n1. Use just 1s if you want! \n1. But the list goes on...\n- Even if you use dashes or asterisks.\n* And last but not least, let's not forget embedded images:\n\n![React Logo w/ Text](https://goo.gl/Umyytc)\n`;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}